// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot;

import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;


//imported libraries
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
/**
 * The VM is configured to automatically run this class, and to call the functions corresponding to
 * each mode, as described in the TimedRobot documentation. If you change the name of this class or
 * the package after creating this project, you must also update the build.gradle file in the
 * project.
 */
//defining controllers and motors
public class Robot extends TimedRobot {

  

  //defines controllers
  
  private XboxController m_leftStick;


//defines the arm and intake motors
  private final WPI_TalonSRX armMotor = new WPI_TalonSRX(5);
  private final WPI_VictorSPX leftGateMotor = new WPI_VictorSPX(8);
  private final WPI_VictorSPX rightGateMotor = new WPI_VictorSPX(7);
  --private final WPI_VictorSPX leftLowerIntake = new WPI_VictorSPX(9);
  --private final WPI_VictorSPX rightLowerInake = new WPI_VictorSPX(10);

  -private final WPI_VictorSPX leftMotor1 = new WPI_VictorSPX(1);
  -private final WPI_VictorSPX leftMotor2 = new WPI_VictorSPX(2);
  -private final WPI_VictorSPX rightMotor1 = new WPI_VictorSPX(3);
  -private final WPI_VictorSPX rightMotor2 = new WPI_VictorSPX(4);

  -private final MotorControllerGroup rightSpeedGroup = new MotorControllerGroup(rightMotor1, rightMotor2);
  -private final MotorControllerGroup leftSpeedGroup = new MotorControllerGroup(leftMotor1, leftMotor2);

  --DifferentialDrive  m_myRobot = new DifferentialDrive(leftSpeedGroup, rightSpeedGroup);

  


  /**
   * This function is run when the robot is first started up and should be used for any
   * initialization code.
   */
  @Override
  public void robotInit() {

    leftSpeedGroup.setInverted(true);


    
    //defines the Xbox Controllers
       //note that each time m_leftStick is referanced, it means the Xbox Controller as a whole
    m_leftStick = new XboxController(0);

   
   
  }


  /**
   * This function is called every 20 ms, no matter the mode. Use this for items like diagnostics
   * that you want ran during disabled, autonomous, teleoperated and test.
   *
   * <p>This runs after the mode specific periodic functions, but before LiveWindow and
   * SmartDashboard integrated updating.
   */
  @Override
  public void robotPeriodic() {

  }



  /**
   * This autonomous (along with the chooser code above) shows how to select between different
   * autonomous modes using the dashboard. The sendable chooser code works with the Java
   * SmartDashboard. If you prefer the LabVIEW Dashboard, remove all of the chooser code and
   * uncomment the getString line to get the auto name from the text box below the Gyro
   *
   * <p>You can add additional auto modes by adding additional comparisons to the switch structure
   * below with additional strings. If using the SendableChooser make sure to add them to the
   * chooser code above as well.
   */



   //define autonomous variables here
  

  @Override
  public void autonomousInit() {
  }

  /** This function is called periodically during autonomous. */
  @Override
  public void autonomousPeriodic() {

  }

    //define Teleop variables here
  double MotorSpeed = armMotor.get();
  double Turbo = 0.5;
  double rightgateMotorSpeed = 0;
  double leftgateMotorSpeed = 0;
  double lowerMotorSpeed = 0;
  boolean SensorActive = false;
  double turningSpeed = .7;
  DigitalInput toplimitSwitch = new DigitalInput(0);

  /** This function is called once when teleop is enabled. */
  @Override
  public void teleopInit() {

    SmartDashboard.putNumber("Motor Speed", MotorSpeed);

    
  }
    
  /** This function is called periodically during operator control. */
  @Override
  public void teleopPeriodic() {
    //defines driving functions


    m_myRobot.arcadeDrive(m_leftStick.getLeftY(), m_leftStick.getRightX() * turningSpeed);

    //defines the limit switch for the arm
    if (toplimitSwitch.get()) {
      SensorActive = false;
    } else {
      SensorActive = true;
    }
    
    //defines arm telescoping functions
    if (m_leftStick.getRightBumper()) {
      armMotor.set(0.5);
    } else if (m_leftStick.getLeftBumper() && SensorActive == false) {
           armMotor.set(-0.3);
       } else {
           armMotor.set(0);
       }
    

    //defines the turbo button
    if (m_leftStick.getRawButton(9)){

      Turbo = 2;
    } else {
      Turbo = 0.5;
    }
    
    //defines the upper intake functions
    if(m_leftStick.getAButton()) {
      leftGateMotor.set(leftgateMotorSpeed = 0.5);
      rightGateMotor.set(rightgateMotorSpeed = 0.5);
  
    } else if (m_leftStick.getBButton()) {
      leftGateMotor.set(leftgateMotorSpeed = -0.3);
      rightGateMotor.set(rightgateMotorSpeed = -0.3);
    } else {
      leftGateMotor.set(leftgateMotorSpeed = 0);
      rightGateMotor.set(rightgateMotorSpeed = 0);
    }

    //defines the lower intake functions
    if(m_leftStick.getXButton()) {
      //leftLowerIntake.set(lowerMotorSpeed = 1);
      //rightLowerInake.set(lowerMotorSpeed = 1);
  
    } else if(m_leftStick.getYButton()) {
      //leftLowerIntake.set(lowerMotorSpeed = -1);
      //rightLowerInake.set(lowerMotorSpeed = -1);

    } else {
     // leftLowerIntake.set(lowerMotorSpeed = 0);
     // rightLowerInake.set(lowerMotorSpeed = 0);
    }

 }

     

  
      
      
  

  /** This function is called once when the robot is disabled. */
  @Override
  public void disabledInit() {}

  /** This function is called periodically when disabled. */
  @Override
  public void disabledPeriodic() {}

  /** This function is called once when test mode is enabled. */
  @Override
  public void testInit() {}

  /** This function is called periodically during test mode. */
  @Override
  public void testPeriodic() {}

  /** This function is called once when the robot is first started up. */
  @Override
  public void simulationInit() {}

  /** This function is called periodically whilst in simulation. */
  @Override
  public void simulationPeriodic() {}
}
